apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

apply from: '../bugly.gradle'

android {
    signingConfigs {
        release {
            storeFile file('/Users/dingyubin/resp/mockapi/keystore/bin.keystore')
            storePassword '123456789'
            keyAlias 'bin'
            keyPassword '123456789'
        }

//        debug {
//            storeFile file('/Users/dingyubin/resp/mockapi/keystore/bin.keystore')
//        }
    }

    //调试
    if(rootProject.hasProperty('devBuild')){
        splits.abi.enable = false
        splits.density.enable = false
        //禁用PNG压缩
        aaptOptions.cruncherEnabled = false
    }

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
//        signingConfig signingConfigs.release
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        resConfigs 'zh', 'xxhdpi'
    }

    buildTypes {
        debug {
            ndk {
                abiFilters "arm64-v8a","armeabi-v7a", "x86"
            }
            buildConfigField "Boolean", "isDebug", "true"
//            signingConfig signingConfigs.debug
            crunchPngs false
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
        }

        release {
            ndk {
                abiFilters "arm64-v8a","armeabi-v7a", "x86"
            }
            buildConfigField "Boolean", "isDebug", "false"
            signingConfig signingConfigs.release
            crunchPngs false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.android.javaCompatibility
        targetCompatibility rootProject.ext.android.javaCompatibility
    }

    buildFeatures {
        viewBinding true
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    implementation project(':baselibrary')

    implementation project(':account')
    implementation project(':im')

    implementation project(':mvp')
    implementation project(':mvvm')
    implementation project(':mvx')
    implementation project(':medialibrary')
    implementation project(':draw')
    implementation project(':rxlibrary')
    implementation project(':coroutine')

    //dex分包
    implementation 'androidx.multidex:multidex:2.0.1'

    //**************崩溃报告**************//
    implementation 'com.tencent.bugly:crashreport_upgrade:1.5.23'
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.14.19'
    //其中latest.release指代最新版本号，也可以指定明确的版本号
    implementation 'com.tencent.bugly:nativecrashreport:3.9.2'

    //**************tinker**************//
//    implementation ("com.tencent.tinker:tinker-android-lib:${rootProject.ext.tinker.versionName}") { changing = true }
    annotationProcessor ("com.tencent.tinker:tinker-android-anno:${rootProject.ext.tinker.versionName}") { changing = true }
    compileOnly("com.tencent.tinker:tinker-android-anno-support:${rootProject.ext.tinker.versionName}")  { changing = true }

}

def bakPath = file("${buildDir}/bakApk")
def baseInfo = "app-debug-0812-13-41-35"

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //是否使用Tinker(当你的项目处于开发阶段时，可以改为false)
    tinkerEnabled = true
    //基础包路径
    tinkerOldApkPath = "${bakPath}/${baseInfo}.apk"
    //基础包的mapping.txt文件路径（用于辅助混淆布丁包的生成，一般在生成release版app时会使用到混淆）
    tinkerApplyMappingPath = "${bakPath}/${baseInfo}-mapping.txt"
    //基础包的R.txt文件路径（如果你在安装包中资源文件有改动，则需要使用改R.txt文件来辅助生成布丁包）
    tinkerApplyResourcePath = "${bakPath}/${baseInfo}-R.txt"
    //只用于构建所有flavor，如果没有，就忽略这个字段（多渠道打包路径）
    tinkerBuildFlavorDirectory = "${bakPath}/app-0812-11-10-50"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : android.defaultConfig.versionName
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? Boolean.parseBoolean(TINKER_ENABLE) : ext.tinkerEnabled
}

//获取多渠道路径
def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

// 启动Tinker
if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'
    //所有Tinker相关的参数配置项
    tinkerPatch {
        oldApk = getOldApkPath()    //基准apk包的路径，必须输入，否则会报错
        ignoreWarning = false       //是否忽略有风险的布丁包。这里选择不忽略，当布丁包风险时会中断编译
        useSign = true              //在允许过程中，我们需要验证基准包apk包与补丁包的签名是否一致，我们是否需要为其签名
        tinkerEnable = buildWithTinker() //是否打开tinker的功能
        allowLoaderInAnyDex = true
        removeLoaderForAllDex = true

        //编译相关的配置项
        buildConfig {
            /**
             * 可选参数：在编译新的apk的时候，我们希望通过保持旧apk的proguard混淆方式，从而减小补丁包的大小，
             * 这个只是推荐设置，不设置applyMapping也不会影响任何的assemble编译。
             */
            applyMapping = getApplyMappingPath()

            /**
             * 可选参数；在编译新的apk时候，我们希望通过旧apk的R.txt文件保持ResId的分配，这样不仅可以减少补丁包的大小，
             * 同时也避免由于ResId改变导致remote view异常。
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * 在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。这个是决定补丁包能运行在哪些基准包上面，
             * 一般来说我们可以使用git版本号、versionName等等。
             */
            tinkerId = getTinkerIdValue()

            /**
             * 如果我们有多个dex,编译补丁时可能会由于类的移动导致变更增多。若打开keepDexApply模式，补丁包将根据基准包的类分布来编译。
             */
            keepDexApply = false

            /**
             * 是否使用加固模式，仅仅将变更的类合成补丁。注意，这种模式仅仅可以用于加固应用中。
             */
            isProtectedApp = false

            /**
             * 是否支持新增非export的Activity（1.9.0版本开始才有的新功能）（注意：设置为true才能修改AndroidManifest文件）
             */
            supportHotplugComponent = true
        }
        // dex相关的配置项
        dex {
            /**
             * 只能是'raw'或者'jar'。 对于'raw'模式，我们将会保持输入dex的格式。对于'jar'模式，我们将会把输入dex重新压缩封装到jar。
             * 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时。默认我们并不会
             * 去校验md5,一般情况下选择jar模式即可。
             */
            dexMode = "jar"

            /**
             * 需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如assets/...
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * 加载patch需要用到的类
             * 定义哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。
             * 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；
             * 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，这些类的直接引用类也需要加入到loader中。
             * 或者你需要将这个类变成非preverify。
             *
             */
            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
//                    "com.yubin.mockapi.MainApplication"
                    "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            /**
             * lib相关的配置项：用于.so替换
             * 需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如assets/...
             */
            pattern = ["lib/*/*.so", "src/main/jniLibs/*/*.so"]
        }

        res {
            /**
             * res相关的配置项：用于资源替换
             * 需要处理res路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如assets/...，务必注意的是，
             * 只有满足pattern的资源才会放到合成后的资源包。
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * 不替换的文件
             * 支持*、?通配符，必须使用'/'分割。若满足ignoreChange的pattern，在编译时会忽略该文件的新增、删除与修改。
             * 最极端的情况，ignoreChange与上面的pattern一致，即会完全忽略所有资源的修改。
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * 默认大小为100kb
             * 对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。这可以降低补丁包的大小，但是会增加合成时的复杂度。
             */
            largeModSize = 100
        }

        //用于生成补丁包中的'package_meta.txt'文件,表明patach文件的一些信息，不是必须，但实际开发中通常会用到
        packageConfig {
            /**
             * 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。
             * 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。
             * 但是建议直接通过修改代码来实现，例如BuildConfig。
             */
            configField("key", "value")
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")
            configField("patchVersion", "1.0") //patch文件的版本号
        }

        /**
         * 7zip路径配置项，执行前提是useSign为true,实际开发中通常不配置
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.2.17"
            /**
             * M1电脑打开注释
             */
            path=isAarch64()?"/opt/homebrew/bin/7za":null
        }
    }

    List<String> flavors = new ArrayList<>()
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
//                            fileName.replace("${fileNamePrefix}.apk", "tinker-demo-debug-0809-11-02-40.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
//                            fileName.replace("mapping.txt", "tinker-demo-debug-0809-11-02-40-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
//                            fileName.replace("R.txt", "tinker-demo-debug-0809-11-02-40-R.txt")
                        }
                    }
                }
            }
        }
    }

    //多渠道包脚本
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"
                    }
                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}

def isAarch64(){
    String arch = System.getProperty("os.arch")
    println("系统aarch:"+arch)
    return  arch.equalsIgnoreCase("aarch64")
}

repositories {
    mavenCentral()
}

task sortPublicTxt() {
    doLast {
        File originalFile = project.file("public.txt")
        File sortedFile = project.file("public_sort.txt")
        List<String> sortedLines = new ArrayList<>()
        originalFile.eachLine {
            sortedLines.add(it)
        }
        Collections.sort(sortedLines)
        sortedFile.delete()
        sortedLines.each {
            sortedFile.append("${it}\n")
        }
    }
}